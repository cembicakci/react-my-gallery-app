{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","components/Title.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","App.js","index.js"],"names":["projectStorage","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","document","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","layout","whileHover","opacity","key","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7734dd54.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/storage' // storage is to store our images\nimport 'firebase/firestore' // this is the database\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBs_K3EuX0_5t47zlnLnOwlKXxEf7bFuEA\",\n    authDomain: \"react-my-gallery-5efd1.firebaseapp.com\",\n    projectId: \"react-my-gallery-5efd1\",\n    storageBucket: \"react-my-gallery-5efd1.appspot.com\",\n    messagingSenderId: \"459587627488\",\n    appId: \"1:459587627488:web:f4a95fbf1c7d7295806385\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectFirestore, projectStorage, timestamp };","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let document = [];\n                snap.forEach(doc => {\n                    document.push({ ...doc.data(), id: doc.id })\n                })\n\n                setDocs(document)\n            })\n\n        return () => unsub()\n    }, [collection])\n\n    return { docs };\n}\n\nexport default useFirestore","import React from 'react'\nimport useFirestore from '../hooks/useFirestore'\nimport { motion } from 'framer-motion'\n\nfunction ImageGrid({ setSelectedImg }) {\n    const { docs } = useFirestore('images')\n    console.log(docs)\n\n    return (\n        <div className='img-grid'>\n            {docs && docs.map(doc => (\n                <motion.div layout whileHover={{ opacity: 1 }} className='img-wrap' key={doc.id} onClick={() => setSelectedImg(doc.url)}>\n                    <motion.img src={doc.url} alt='uploaded pic' initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{delay: 1}} />\n                </motion.div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid","import React from 'react'\nimport { motion } from 'framer-motion'\n\nfunction Modal({ selectedImg, setSelectedImg }) {\n\n    const handleClick = (e) => {\n        if (e.target.classList.contains('backdrop')) {\n            setSelectedImg(null)\n        }\n    }\n\n    return (\n        <motion.div className='backdrop' onClick={handleClick} initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n            <motion.img src={selectedImg} alt='enlarged pic' initial={{ y: '-100vh' }} animate={{ y: 0 }} />\n        </motion.div>\n    )\n}\n\nexport default Modal","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>My Gallery</h1>\n      <h2>Pictures</h2>\n      <p>Select below button to add your picture</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        //references\n        const storageRef = projectStorage.ref(file.name)\n        const collectionRef = projectFirestore.collection('images');\n\n        storageRef.put(file).on(\"state_changed\", (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100\n            setProgress(percentage);\n        }, (err) => {\n            setError(err)\n        }, async () => {\n            const url = await storageRef.getDownloadURL()\n            const createdAt = timestamp();\n            collectionRef.add({ url, createdAt})\n            setUrl(url)\n        })\n    }, [file])\n\n    return {progress, url, error}\n}\n\nexport default useStorage;","import React, { useEffect } from 'react'\nimport useStorage from '../hooks/useStorage'\nimport { motion } from 'framer-motion'\n\nfunction ProgressBar({ file, setFile }) {\n    const { url, progress } = useStorage(file)\n\n    useEffect(() => {\n        if (url) {\n            setFile(null)\n        }\n    }, [url, setFile])\n\n    return (\n        <motion.div className='progress-bar' initial={{width: 0}} animate={{width: progress + '%'}} ></motion.div>\n    )\n}\n\nexport default ProgressBar","import React, { useState } from 'react'\nimport ProgressBar from './ProgressBar';\n\nfunction UploadForm() {\n\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg']\n\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n\n        if (selected && types.includes(selected.type)) {\n            setFile(selected)\n            setError('')\n        } else {\n            setFile(null)\n            setError('Please select an image file (png or jpeg)')\n        }\n\n    }\n\n    return (\n        <form>\n            <label>\n                <input type=\"file\" onChange={changeHandler} />\n                <span>+</span>\n            </label>\n            <div className='output'>\n                {error && <div className='error'>{error}</div>}\n                {file && <div>{file.name}</div>}\n                {file && <div> <ProgressBar file={file} setFile={setFile} /></div>}\n            </div>\n        </form>\n    )\n}\n\nexport default UploadForm","import React, { useState } from 'react';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\n\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}